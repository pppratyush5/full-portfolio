[{"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/index.js":"1","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/App.js":"2","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/serviceWorker.js":"3","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/app/store.js":"4","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/firebase.js":"5","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/common pages/Login.js":"6","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/Discord app/DiscordHome.js":"7","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/features/counter/appSlice.js":"8","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/features/counter/userSlice.js":"9","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/Discord app/Chat.js":"10","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/Discord app/Sidebar.js":"11","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/features/counter/counterAPI.js":"12","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/Discord app/Message.js":"13","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/Discord app/SidebarChannel.js":"14","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/travel-advisor/TravelHome.js":"15"},{"size":627,"mtime":1630459447198,"results":"16","hashOfConfig":"17"},{"size":1156,"mtime":1630486091895,"results":"18","hashOfConfig":"17"},{"size":5014,"mtime":1630459447198,"results":"19","hashOfConfig":"17"},{"size":268,"mtime":1630459447198,"results":"20","hashOfConfig":"17"},{"size":666,"mtime":1630459447198,"results":"21","hashOfConfig":"17"},{"size":850,"mtime":1630488282644,"results":"22","hashOfConfig":"17"},{"size":254,"mtime":1630459447198,"results":"23","hashOfConfig":"17"},{"size":560,"mtime":1630459447198,"results":"24","hashOfConfig":"17"},{"size":2831,"mtime":1630459447198,"results":"25","hashOfConfig":"17"},{"size":3441,"mtime":1630459676257,"results":"26","hashOfConfig":"17"},{"size":3639,"mtime":1630459447198,"results":"27","hashOfConfig":"17"},{"size":196,"mtime":1630459447198,"results":"28","hashOfConfig":"17"},{"size":508,"mtime":1630459447198,"results":"29","hashOfConfig":"17"},{"size":598,"mtime":1630459447198,"results":"30","hashOfConfig":"17"},{"size":154,"mtime":1630480599545,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"tcqhhd",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/index.js",[],["66","67"],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/App.js",["68","69"],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/serviceWorker.js",[],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/app/store.js",[],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/firebase.js",[],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/common pages/Login.js",[],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/Discord app/DiscordHome.js",[],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/features/counter/appSlice.js",[],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/features/counter/userSlice.js",["70"],"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchCount } from \"./counterAPI\";\n\nconst initialState = {\n  value: 0,\n  status: \"idle\",\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  \"user/fetchCount\",\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n    // decrement: (state) => {\n    //   state.value -= 1;\n    // },\n    // // Use the PayloadAction type to declare the contents of `action.payload`\n    // incrementByAmount: (state, action) => {\n    //   state.value += action.payload;\n    // },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.user.value)`\nexport const selectUser = (state) => state.user.user;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default userSlice.reducer;\n","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/Discord app/Chat.js",[],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/Discord app/Sidebar.js",["71"],"import { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../features/counter/userSlice\";\nimport \"./Sidebar.css\";\nimport SidebarChannel from \"./SidebarChannel\";\nimport db, { auth } from \"../../firebase\";\nimport { useEffect, useState } from \"react\";\n// import down_arrow_white from \"../../assets/arrow_down_white.svg\";\nimport add_circle_white from \"../../assets/add_circle_white.svg\";\nimport signal_cellular from \"../../assets/signal_cellular_alt_green.svg\";\n\nconst Sidebar = () => {\n  const user = useSelector(selectUser);\n  const [channels, setChannels] = useState([]);\n  useEffect(() => {\n    db.collection(\"channels\").onSnapshot((snapShot) => {\n      setChannels(\n        snapShot.docs.map((doc) => ({\n          id: doc.id,\n          channel: doc.data(),\n        }))\n      );\n    });\n  }, []);\n\n  const handleAddChannel = () => {\n    const channelName = prompt(\"Enter New channel name\");\n    if (channelName) {\n      db.collection(\"channels\").add({\n        channelName: channelName,\n        userId: user.uid,\n      });\n    }\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__top\">\n        <h3>Pratyush Kumar</h3>\n        {/* <img width=\"15\" height=\"15\" src={down_arrow_white} /> */}\n      </div>\n      <div className=\"sidebar__channels\">\n        <div className=\"sidebar__channersHeader\">\n          <div className=\"channelHeader\">\n            {/* <img\n              width=\"15\"\n              height=\"15\"\n              // src=\"https://img.icons8.com/ios-filled/50/000000/chevron-down.png\"\n            /> */}\n            <h3 className=\"textChannels\">Channels</h3>\n            <img onClick={handleAddChannel} src={add_circle_white} alt=\"\" />\n          </div>\n        </div>\n        <div className=\"channelList\">\n          {channels.map(({ id, channel }) => {\n            if (user.uid === channel.userId)\n              return (\n                <SidebarChannel\n                  key={id}\n                  id={id}\n                  channelName={channel.channelName}\n                />\n              );\n          })}\n        </div>\n      </div>\n\n      <div className=\"sidebar__voice\">\n        <span className=\"sidebar__voiceIcon\" fontSize=\"large\">\n          <img src={signal_cellular} alt=\"\" />\n        </span>\n        <div className=\"sidebar__voiceInfo\">\n          <h3>Voice Connected</h3>\n          <p>Stream</p>\n        </div>\n        <div className=\"sidebar__voiceIcons\">\n          {/* <span>info icon</span>\n          <span>call Icon</span> */}\n        </div>\n      </div>\n      <div className=\"sidebar__profile\">\n        <img\n          onClick={() => {\n            auth.signOut();\n          }}\n          src={user.photo}\n          alt=\"avatar\"\n        />\n        <div className=\"sidebarprofileInfo\">\n          <h3>{user.displayName}</h3>\n          <p>{user.email}</p>\n        </div>\n        <div className=\"sidebar__profileIcons\">\n          {/* <span>mic icon</span>\n          <span>headSet Icon</span>\n          <span>setting Icon</span> */}\n        </div>\n      </div>\n      {/* <div>\n        Discovery\n        <span className=\"zoom-plus\">+ Zoom</span>\n        <span>1.888.799.9666</span>\n        <span> SALES PLANS </span>\n        <span>JOIN A MEETING</span>\n        <span>HOST A MEETING </span>\n        <span>SIGN IN</span>\n        <button>Sign up, Its free </button>\n      </div>\n\n      <div>Thank you for attending the meeting</div>\n\n      <di>Audio Plan | Zoom Blog | Customer Case Studies</di>\n\n      <div>\n        © 2021 Zoom Video Communications, Inc. All rights reserved. Privacy &\n        Legal Policies Support English\n      </div> */}\n    </div>\n  );\n};\n\nexport default Sidebar;\n","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/features/counter/counterAPI.js",[],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/Discord app/Message.js",["72"],"import \"./Message.css\";\nconst Message = ({ timestamp, user, message }) => {\n  let date;\n  if (timestamp) date = new Date(timestamp?.toDate()).toUTCString();\n\n  return (\n    <div className=\"message\">\n      <img className=\"user__photo\" src={user.photo} alt=\"user photo\" />\n      <div className=\"message__info\">\n        <h4>\n          {user.displayName}\n          <span className=\"message__timestamp\">{date}</span>\n        </h4>\n        <p>{message}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/Discord app/SidebarChannel.js",[],"/home/pratyush/ReactApp/new repo/full-portfolio/client/src/projects/travel-advisor/TravelHome.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":19},{"ruleId":"77","severity":1,"message":"81","line":8,"column":8,"nodeType":"79","messageId":"80","endLine":8,"endColumn":18},{"ruleId":"77","severity":1,"message":"82","line":4,"column":7,"nodeType":"79","messageId":"80","endLine":4,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":54,"column":43,"nodeType":"85","messageId":"86","endLine":54,"endColumn":45},{"ruleId":"87","severity":1,"message":"88","line":8,"column":7,"nodeType":"89","endLine":8,"endColumn":72},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'DiscordHome' is defined but never used.","Identifier","unusedVar","'TravelHome' is defined but never used.","'initialState' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]